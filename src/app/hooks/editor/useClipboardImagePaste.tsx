import { useCallback } from 'react';
import { EditorState, Modifier, ContentState, SelectionState, ContentBlock, genKey } from 'draft-js';
import { addImage } from '@widgets/editor/plugins/Image/strategy';
import BlockType from '@entities/enums/BlockType';
import useBlockTypes from '@app/hooks/editor/useBlockTypes';

interface ProcessedContent {
  hasImages: boolean;
  elements: Array<{
    type: 'text' | 'image' | 'heading1' | 'heading2' | 'heading3' | 'numbered-list' | 'bullet-list' | 'table' | 'paragraph';
    content: string;
    data?: any;
    level?: number; // –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å–ø–∏—Å–∫–æ–≤
  }>;
}

// –ú–∞–ø–ø–∏–Ω–≥ HTML —Ç–µ–≥–æ–≤ –≤ —Ç–∏–ø—ã –±–ª–æ–∫–æ–≤
const HTML_TO_BLOCK_TYPE: Record<string, string> = {
  'H1': BlockType.Heading1,
  'H2': BlockType.Heading2,
  'H3': BlockType.Heading3,
  'P': BlockType.Text,
  'DIV': BlockType.Text,
  'LI': '', // –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
  'OL': BlockType.NumberedList,
  'UL': BlockType.BulletList,
  'TABLE': BlockType.Table,
};

export const useClipboardImagePaste = (setEditorState: (state: EditorState | ((state: EditorState) => EditorState)) => void) => {
  const { toggleBlockType } = useBlockTypes();
  
  const parseHtmlContent = (html: string): ProcessedContent => {
    const result: ProcessedContent = {
      hasImages: false,
      elements: []
    };

    try {
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
      const getElementType = (element: Element, parentElement?: Element): string => {
        const tagName = element.tagName;
        
        switch (tagName) {
          case 'H1': return 'heading1';
          case 'H2': return 'heading2';
          case 'H3': return 'heading3';
          case 'P': return 'paragraph';
          case 'DIV': return 'paragraph';
          case 'LI':
            if (parentElement?.tagName === 'OL') return 'numbered-list';
            if (parentElement?.tagName === 'UL') return 'bullet-list';
            return 'paragraph';
          case 'TABLE': return 'table';
          default: return 'paragraph';
        }
      };
      
      // –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–ª–æ–≤ —Å—Ç—Ä–æ–≥–æ –≤ DOM –ø–æ—Ä—è–¥–∫–µ –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
      const processNodeInOrder = (node: Node): void => {
        if (node.nodeType === Node.TEXT_NODE) {
          const text = node.textContent?.trim();
          if (text) {
            result.elements.push({
              type: 'paragraph',
              content: text
            });
            console.log(`‚úÖ Added text node: "${text.substring(0, 50)}..."`);
          }
        } else if (node.nodeType === Node.ELEMENT_NODE) {
          const element = node as Element;
          const tagName = element.tagName;
          
          console.log(`üîç Processing element in order: ${tagName}`);
          
          switch (tagName) {
            case 'H1':
            case 'H2':
            case 'H3':
              const headingText = element.textContent?.trim();
              if (headingText) {
                const headingType = getElementType(element);
                result.elements.push({
                  type: headingType as any,
                  content: headingText
                });
                console.log(`‚úÖ Added ${headingType}: "${headingText}"`);
              }
              break;
              
            case 'P':
              const paragraphText = element.textContent?.trim();
              if (paragraphText) {
                result.elements.push({
                  type: 'paragraph',
                  content: paragraphText
                });
                console.log(`‚úÖ Added paragraph: "${paragraphText.substring(0, 50)}..."`);
              }
              break;
              
            case 'IMG':
              const src = element.getAttribute('src');
              if (src) {
                result.hasImages = true;
                result.elements.push({
                  type: 'image',
                  content: src,
                  data: {
                    alt: element.getAttribute('alt') || 'Image',
                    title: element.getAttribute('title') || 'Image'
                  }
                });
                console.log(`üñºÔ∏è Added image: ${src.substring(0, 50)}...`);
              }
              break;
              
            case 'LI':
              const listItemText = element.textContent?.trim();
              if (listItemText) {
                const parentList = element.parentElement;
                const listType = parentList?.tagName === 'OL' ? 'numbered-list' : 'bullet-list';
                result.elements.push({
                  type: listType,
                  content: listItemText
                });
                console.log(`‚úÖ Added ${listType} item: "${listItemText}"`);
              }
              // Process any images within list item
              Array.from(element.childNodes).forEach(childNode => {
                if (childNode.nodeType === Node.ELEMENT_NODE && (childNode as Element).tagName === 'IMG') {
                  processNodeInOrder(childNode);
                }
              });
              break;
              
            case 'DIV':
            case 'SECTION':
            case 'ARTICLE':
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–µ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ —Å—Ç—Ä–æ–≥–æ–º –ø–æ—Ä—è–¥–∫–µ
              Array.from(element.childNodes).forEach(childNode => {
                processNodeInOrder(childNode);
              });
              break;
              
            case 'UL':
            case 'OL':
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ
              Array.from(element.children).forEach(child => {
                if (child.tagName === 'LI') {
                  processNodeInOrder(child);
                }
              });
              break;
              
            case 'TABLE':
              processTable(element);
              break;
              
            case 'FIGURE':
              // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ FIGURE —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (VC.ru, Medium –∏ –¥—Ä.)
              console.log('üñºÔ∏è Processing FIGURE element');
              
              // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ FIGURE
              const figureImg = element.querySelector('img');
              if (figureImg) {
                const src = figureImg.getAttribute('src');
                if (src) {
                  result.hasImages = true;
                  result.elements.push({
                    type: 'image',
                    content: src,
                    data: {
                      alt: figureImg.getAttribute('alt') || 'Image from figure',
                      title: figureImg.getAttribute('title') || 'Image from figure'
                    }
                  });
                  console.log(`‚úÖ Added image from FIGURE: ${src.substring(0, 50)}...`);
                }
              }
              
              // –¢–∞–∫–∂–µ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç (caption) –µ—Å–ª–∏ –µ—Å—Ç—å
              const figureText = element.textContent?.trim();
              if (figureText) {
                result.elements.push({
                  type: 'paragraph',
                  content: figureText
                });
                console.log(`‚úÖ Added figure caption: "${figureText.substring(0, 50)}..."`);
              }
              break;
              
            default:
              // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
              const unknownText = element.textContent?.trim();
              if (unknownText) {
                result.elements.push({
                  type: 'paragraph',
                  content: unknownText
                });
                console.log(`‚úÖ Added unknown element as paragraph: "${unknownText.substring(0, 50)}..."`);
              }
              break;
          }
        }
      };
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü (–±–∞–∑–æ–≤–∞—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É)
      const processTable = (tableElement: Element) => {
        console.log('üìä Processing table');
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
        const tableText = tableElement.textContent?.trim();
        if (tableText) {
          result.elements.push({
            type: 'table',
            content: `–¢–∞–±–ª–∏—Ü–∞: ${tableText}`,
            data: {
              note: '–¢–∞–±–ª–∏—Ü—ã –ø–æ–∫–∞ –≤—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç. –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'
            }
          });
        }
      };
      

      
      // –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–≥–æ –≤ DOM –ø–æ—Ä—è–¥–∫–µ
      console.log('üöÄ Starting new DOM order processing...');
      const bodyNodes = Array.from(doc.body.childNodes);
      
      bodyNodes.forEach(node => {
        processNodeInOrder(node);
      });

      console.log('üìÑ Parsed content elements:', result.elements.length);
      console.log('üìã Elements structure:', result.elements.map(el => `${el.type}: ${el.content.substring(0, 30)}...`));
      
      const imageElements = result.elements.filter(el => el.type === 'image');
      console.log('üñºÔ∏è Total images found:', imageElements.length);
      
      if (imageElements.length > 0) {
        console.log('üîç Image details:');
        imageElements.forEach((img, index) => {
          console.log(`  ${index + 1}. ${img.content.substring(0, 80)}...`);
          console.log(`     Type: ${img.content.startsWith('data:') ? 'Data URL' : img.content.startsWith('http') ? 'External URL' : 'Other'}`);
        });
      }
      
      console.log('üìù Total text elements:', result.elements.filter(el => el.type !== 'image').length);
      
    } catch (error) {
      console.error('‚ùå Error parsing HTML:', error);
    }

    return result;
  };

  const convertFilesToDataUrls = useCallback(async (files: File[]): Promise<Array<{ src: string; data: any }>> => {
    const imageFiles = files.filter(file => file.type.startsWith('image/'));
    
    const imagePromises = imageFiles.map(async (file) => {
      const dataUrl = await new Promise<string>((resolve) => {
        const reader = new FileReader();
        reader.onload = (e) => resolve(e.target?.result as string);
        reader.readAsDataURL(file);
      });
      
      return {
        src: dataUrl,
        data: {
          alt: file.name,
          title: file.name
        }
      };
    });

    return Promise.all(imagePromises);
  }, []);

  const createBlockWithType = useCallback((content: string, blockType: string, currentEditorState: EditorState): EditorState => {
    console.log(`üîß Creating block type: ${blockType} with content:`, content.substring(0, 50) + '...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
    const newBlock = new ContentBlock({
      key: genKey(),
      type: 'unstyled', // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
      text: content,
      depth: 0,
      inlineStyleRanges: [],
      entityRanges: [],
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
    const contentState = currentEditorState.getCurrentContent();
    const blockMap = contentState.getBlockMap();
    const newBlockMap = blockMap.set(newBlock.getKey(), newBlock);
    
    let newEditorState = EditorState.push(
      currentEditorState, 
      ContentState.createFromBlockArray(newBlockMap.toArray()), 
      'insert-fragment'
    );
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –Ω–æ–≤—ã–π –±–ª–æ–∫
    const newSelection = newEditorState.getSelection().merge({
      focusKey: newBlock.getKey(),
      anchorKey: newBlock.getKey(),
      focusOffset: 0,
      anchorOffset: 0,
    });
    
    newEditorState = EditorState.forceSelection(newEditorState, newSelection);
    
    // –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω—É–∂–Ω—ã–π —Ç–∏–ø –±–ª–æ–∫–∞
    if (blockType !== BlockType.Text) {
      newEditorState = toggleBlockType(newEditorState, blockType, newBlock);
    }
    
    return newEditorState;
  }, [toggleBlockType]);

  const insertMixedContent = useCallback((content: ProcessedContent, currentEditorState: EditorState) => {
    let newEditorState = currentEditorState;
    
    console.log('üîß Inserting mixed content with', content.elements.length, 'elements');
    console.log('üñºÔ∏è Images to insert:', content.elements.filter(el => el.type === 'image').length);
    console.log('üìù Text elements to insert:', content.elements.filter(el => el.type !== 'image').length);
    console.log('üìã Element sequence:', content.elements.map(el => el.type).join(' ‚Üí '));
    
    content.elements.forEach((element, index) => {
      switch (element.type) {
        case 'paragraph':
          // ARCHITECTURAL FIX: Always create new blocks for consistent structure
          newEditorState = createBlockWithType(element.content, BlockType.Text, newEditorState);
          break;
          
        case 'heading1':
          newEditorState = createBlockWithType(element.content, BlockType.Heading1, newEditorState);
          break;
          
        case 'heading2':
          newEditorState = createBlockWithType(element.content, BlockType.Heading2, newEditorState);
          break;
          
        case 'heading3':
          newEditorState = createBlockWithType(element.content, BlockType.Heading3, newEditorState);
          break;
          
        case 'numbered-list':
          // CORRECT: Each element is already individual list item
          newEditorState = createBlockWithType(element.content, BlockType.NumberedList, newEditorState);
          break;
          
        case 'bullet-list':
          // CORRECT: Each element is already individual list item  
          newEditorState = createBlockWithType(element.content, BlockType.BulletList, newEditorState);
          break;
          
        case 'table':
          // –ü–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π
          newEditorState = createBlockWithType(element.content, BlockType.Text, newEditorState);
          break;
          
        case 'image':
          if (element.content) {
            console.log('üñºÔ∏è Inserting image:', element.content.substring(0, 50) + '...');
            console.log('üîç Image source type:', element.content.startsWith('data:') ? 'Data URL' : 'External URL');
            
            // –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            try {
              const prevBlockCount = newEditorState.getCurrentContent().getBlockMap().size;
              console.log('üìä Blocks before image insertion:', prevBlockCount);
              
              if (element.content.startsWith('data:')) {
                // Data URL - –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
                console.log('‚úÖ Processing data URL image directly');
                newEditorState = addImage(newEditorState, element.content, element.data || {});
              } else if (element.content.startsWith('http') || element.content.startsWith('//')) {
                // –í–Ω–µ—à–Ω–∏–π URL - –ø–æ–∫–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
                console.log('‚ö†Ô∏è Processing external URL image:', element.content);
                newEditorState = addImage(newEditorState, element.content, element.data || {});
              } else {
                // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
                console.log('üîÑ Processing relative/unknown URL image:', element.content);
                newEditorState = addImage(newEditorState, element.content, element.data || {});
              }
              
              const newBlockCount = newEditorState.getCurrentContent().getBlockMap().size;
              console.log('üìä Blocks after image insertion:', newBlockCount);
              
              if (newBlockCount > prevBlockCount) {
                console.log('‚úÖ Image insertion result: SUCCESS - Block added');
              } else {
                console.log('‚ùå Image insertion FAILED - No block added');
                console.log('üîÑ Trying fallback: Insert as text description');
                
                // FALLBACK: –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ addImage –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                const imageDescription = `[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${element.data?.alt || 'Image'} - ${element.content}]`;
                newEditorState = createBlockWithType(imageDescription, BlockType.Text, newEditorState);
                console.log('‚úÖ Fallback: Inserted image as text description');
              }
              
            } catch (error) {
              console.error('‚ùå Error inserting image:', error);
              console.error('üìÑ Image data:', { content: element.content, data: element.data });
            }
          }
          break;
          
        default:
          console.warn('‚ö†Ô∏è Unknown element type:', element.type);
          if (element.content) {
            newEditorState = createBlockWithType(element.content, BlockType.Text, newEditorState);
          }
      }
    });

    return newEditorState;
  }, [createBlockWithType]);

  const handlePastedFiles = useCallback((files: File[]): 'handled' | 'not-handled' => {
    console.log('üìé handlePastedFiles called with:', files.length, 'files');
    
    const imageFiles = files.filter(file => file.type.startsWith('image/'));
    
    if (imageFiles.length > 0) {
      console.log('üñºÔ∏è Processing', imageFiles.length, 'image files through handlePastedFiles');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      convertFilesToDataUrls(imageFiles).then(images => {
        const content: ProcessedContent = {
          hasImages: true,
          elements: images.map(img => ({
            type: 'image' as const,
            content: img.src,
            data: img.data
          }))
        };

        setEditorState((currentState: EditorState) => 
          insertMixedContent(content, currentState)
        );
      });

      return 'handled';
    }

    return 'not-handled';
  }, [convertFilesToDataUrls, insertMixedContent, setEditorState]);

  const handlePastedText = useCallback((text: string, html?: string): 'handled' | 'not-handled' => {
    console.log('üìù handlePastedText called');
    console.log('Text length:', text.length);
    console.log('HTML length:', html?.length || 0);
    
    if (html) {
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      const hasImages = html.includes('<img');
      const hasHeadings = html.includes('<h1') || html.includes('<h2') || html.includes('<h3');
      const hasLists = html.includes('<ol') || html.includes('<ul');
      const hasTables = html.includes('<table');
      
      console.log('üîç Content analysis:', {
        hasImages,
        hasHeadings,
        hasLists,
        hasTables
      });
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ª—é–±–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–º–∏
      if (hasImages || hasHeadings || hasLists || hasTables) {
        console.log('üéØ Found structured content, processing with custom handler');
        
        const parsedContent = parseHtmlContent(html);
        
        console.log('üìä Parsed content analysis:', {
          totalElements: parsedContent.elements.length,
          hasImages: parsedContent.hasImages,
          elementTypes: parsedContent.elements.map(el => el.type),
          imageElements: parsedContent.elements.filter(el => el.type === 'image').length
        });
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ò–õ–ò —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–º–∏
        if (parsedContent.hasImages || parsedContent.elements.some(el => el.type !== 'paragraph')) {
          console.log('‚úÖ Processing structured content, preventing default DraftJS paste');
          
          // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
          setTimeout(() => {
            setEditorState((currentState: EditorState) => 
              insertMixedContent(parsedContent, currentState)
            );
          }, 0);

          return 'handled'; // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º paste —Å–∞–º–∏
        } else {
          console.log('‚ö†Ô∏è Structured content detected but no elements parsed, fallback to default');
          
          // Fallback: –µ—Å–ª–∏ HTML —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
          if (hasImages) {
            console.log('üîß Attempting fallback image extraction');
            
            // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∫ fallback
            const imgRegex = /<img[^>]+src="([^"]+)"[^>]*>/gi;
            let match;
            const fallbackImages = [];
            
            while ((match = imgRegex.exec(html)) !== null) {
              fallbackImages.push(match[1]);
            }
            
            if (fallbackImages.length > 0) {
              console.log('üñºÔ∏è Fallback found images:', fallbackImages.length);
              
              // –¢–∞–∫–∂–µ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ HTML —Ç–µ–≥–æ–≤
              const textContent = html.replace(/<[^>]*>/g, '').trim();
              console.log('üìù Fallback extracted text length:', textContent.length);
              
              const fallbackElements = [];
              
              // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
              if (textContent) {
                fallbackElements.push({
                  type: 'paragraph' as const,
                  content: textContent
                });
              }
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              fallbackImages.forEach(src => {
                fallbackElements.push({
                  type: 'image' as const,
                  content: src,
                  data: {
                    alt: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Google Docs',
                    title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Google Docs'
                  }
                });
              });
              
              const fallbackContent: ProcessedContent = {
                hasImages: true,
                elements: fallbackElements
              };
              
              console.log('üîÑ Fallback content elements:', fallbackContent.elements.map(el => el.type));
              
              setTimeout(() => {
                setEditorState((currentState: EditorState) => 
                  insertMixedContent(fallbackContent, currentState)
                );
              }, 0);
              
              return 'handled';
            }
          }
        }
      }
    }
    
    console.log('üìù No structured content found, letting DraftJS handle text paste');
    return 'not-handled'; // –ü–æ–∑–≤–æ–ª—è–µ–º DraftJS –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
  }, [parseHtmlContent, insertMixedContent, setEditorState]);

  // –£–±–∏—Ä–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ paste —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  // –í—Å—é –ª–æ–≥–∏–∫—É —Å–æ—Å—Ä–µ–¥–æ—Ç–∞—á–∏–≤–∞–µ–º –≤ DraftJS –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
  const handleCustomPaste = useCallback((event: ClipboardEvent) => {
    // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–±–∞–≥–≥–∏–Ω–≥–∞
    console.log('üîç Custom paste event triggered (debug only)');
    console.log('üìã Clipboard data types:', Array.from(event.clipboardData?.types || []));
  }, []);

  return {
    handlePastedFiles,
    handlePastedText,
    handleCustomPaste
  };
}; 